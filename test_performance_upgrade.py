#!/usr/bin/env python3
"""–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

async def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Redis –∫—ç—à–∞
        from src.bot.structures.redis_cache import RedisCache
        print("‚úÖ Redis –∫—ç—à –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ middleware
        from src.bot.middlewares.database_md import DatabaseMiddleware
        from src.bot.middlewares.redis_md import RedisMiddleware
        print("‚úÖ Middleware –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ dreams –ª–æ–≥–∏–∫–∏
        from src.bot.logic.dreams.select import get_image_content
        print("‚úÖ Dreams –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ notification
        from src.bot.logic.dreams.notification import send_batch_notifications
        print("‚úÖ Notification –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_redis_cache():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Redis –∫—ç—à (–º–æ–∫)."""
    try:
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis –∫—ç—à...")
        
        from src.bot.structures.redis_cache import RedisCache
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ Redis –∫–ª–∏–µ–Ω—Ç
        class MockRedis:
            async def setex(self, key, ttl, value):
                pass
            async def get(self, key):
                return None
            async def incr(self, key):
                return 1
            async def expire(self, key, ttl):
                pass
            async def delete(self, key):
                pass
        
        redis_cache = RedisCache(MockRedis())
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        await redis_cache.set_user_offset(123, 5)
        offset = await redis_cache.get_user_offset(123)
        print(f"‚úÖ Redis –∫—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç: offset = {offset}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis –∫—ç—à–∞: {e}")
        return False

async def test_database_middleware():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Database middleware (–º–æ–∫)."""
    try:
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Database middleware...")
        
        from src.bot.middlewares.database_md import DatabaseMiddleware
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ session maker
        class MockSessionMaker:
            async def __aenter__(self):
                return MockSession()
            async def __aexit__(self, exc_type, exc_val, exc_tb):
                pass
        
        class MockSession:
            async def rollback(self):
                pass
        
        sessionmaker = MockSessionMaker()
        middleware = DatabaseMiddleware(sessionmaker)
        print("‚úÖ Database middleware —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Database middleware: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Wanty Bot\n")
    
    tests = [
        test_imports(),
        test_redis_cache(),
        test_database_middleware(),
    ]
    
    results = await asyncio.gather(*tests, return_exceptions=True)
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for i, result in enumerate(results):
        if result is True:
            passed += 1
            print(f"‚úÖ –¢–µ—Å—Ç {i+1}: –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå –¢–µ—Å—Ç {i+1}: –ü–†–û–í–ê–õ–ï–ù - {result}")
    
    print("=" * 50)
    print(f"üìà –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥.")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
