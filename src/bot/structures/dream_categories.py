"""Dream categories system for Wanty bot."""

from typing import Dict, List, Optional
from dataclasses import dataclass


@dataclass
class DreamCategory:
    """Dream category data structure."""
    id: str
    name: str
    description: str
    emoji: str
    examples: List[str]
    color: str = "#4A90E2"


class DreamCategorySystem:
    """Manages dream categories and filtering."""
    
    def __init__(self):
        """Initialize category system."""
        self.categories = self._initialize_categories()
    
    def _initialize_categories(self) -> Dict[str, DreamCategory]:
        """Initialize all available dream categories."""
        return {
            "entertainment": DreamCategory(
                id="entertainment",
                name="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
                description="–í–µ—Å–µ–ª—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–æ—Å—É–≥–∞",
                emoji="üé≠",
                examples=[
                    "–°—Ö–æ–¥–∏—Ç—å –≤ –∫–∏–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º",
                    "–ü–æ—Å–µ—Ç–∏—Ç—å –∫–æ–Ω—Ü–µ—Ä—Ç –ª—é–±–∏–º–æ–π –≥—Ä—É–ø–ø—ã",
                    "–°—ã–≥—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã",
                    "–°—Ö–æ–¥–∏—Ç—å –≤ —Ç–µ–∞—Ç—Ä",
                    "–ü–æ—Å–µ—Ç–∏—Ç—å –≤—ã—Å—Ç–∞–≤–∫—É –∏–ª–∏ –º—É–∑–µ–π"
                ],
                color="#FF6B6B"
            ),
            "sports": DreamCategory(
                id="sports",
                name="–°–ø–æ—Ä—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                description="–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö",
                emoji="‚öΩ",
                examples=[
                    "–ü—Ä–æ–±–µ–∂–∫–∞ –≤ –ø–∞—Ä–∫–µ",
                    "–ò–≥—Ä–∞ –≤ —Ñ—É—Ç–±–æ–ª",
                    "–ü–æ—Ö–æ–¥ –≤ –≥–æ—Ä—ã",
                    "–í–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞",
                    "–ó–∞–Ω—è—Ç–∏—è –π–æ–≥–æ–π"
                ],
                color="#4ECDC4"
            ),
            "food": DreamCategory(
                id="food",
                name="–ö—É–ª–∏–Ω–∞—Ä–∏—è –∏ –µ–¥–∞",
                description="–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∏ –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
                emoji="üçΩÔ∏è",
                examples=[
                    "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∫—É—Ö–Ω—é",
                    "–ù–∞—É—á–∏—Ç—å—Å—è –≥–æ—Ç–æ–≤–∏—Ç—å",
                    "–°—Ö–æ–¥–∏—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω",
                    "–£—Å—Ç—Ä–æ–∏—Ç—å –ø–∏–∫–Ω–∏–∫",
                    "–ü–æ—Å–µ—Ç–∏—Ç—å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å"
                ],
                color="#FFE66D"
            ),
            "travel": DreamCategory(
                id="travel",
                name="–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
                description="–ü–æ–µ–∑–¥–∫–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Å—Ç",
                emoji="‚úàÔ∏è",
                examples=[
                    "–ü–æ–µ–∑–¥–∫–∞ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
                    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É",
                    "–ü–æ—Ö–æ–¥ –≤ –ª–µ—Å",
                    "–ü–æ–µ–∑–¥–∫–∞ –Ω–∞ –º–æ—Ä–µ",
                    "–≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –º–µ—Å—Ç–∞–º"
                ],
                color="#95E1D3"
            ),
            "learning": DreamCategory(
                id="learning",
                name="–û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                description="–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ –Ω–∞–≤—ã–∫–æ–≤",
                emoji="üìö",
                examples=[
                    "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–π —è–∑—ã–∫",
                    "–ù–∞—É—á–∏—Ç—å—Å—è –∏–≥—Ä–∞—Ç—å –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ",
                    "–ü–æ—Å–µ—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å",
                    "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é",
                    "–ù–∞—É—á–∏—Ç—å—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å"
                ],
                color="#A8E6CF"
            ),
            "social": DreamCategory(
                id="social",
                name="–û–±—â–µ–Ω–∏–µ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞",
                description="–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞",
                emoji="üë•",
                examples=[
                    "–ù–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π",
                    "–£—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—á–µ—Ä–∏–Ω–∫—É",
                    "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª—É–±—É –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º",
                    "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö",
                    "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤"
                ],
                color="#FFB6C1"
            ),
            "creative": DreamCategory(
                id="creative",
                name="–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
                description="–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                emoji="üé®",
                examples=[
                    "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω—É",
                    "–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑",
                    "–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                    "–°–æ–∑–¥–∞—Ç—å –º—É–∑—ã–∫—É",
                    "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤—ã—Å—Ç–∞–≤–∫–µ"
                ],
                color="#DDA0DD"
            ),
            "wellness": DreamCategory(
                id="wellness",
                name="–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ",
                description="–ó–∞–±–æ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –¥—É—à–µ–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
                emoji="üßò",
                examples=[
                    "–ó–∞–Ω—è—Ç—å—Å—è –º–µ–¥–∏—Ç–∞—Ü–∏–µ–π",
                    "–ü–æ—Å–µ—Ç–∏—Ç—å —Å–ø–∞",
                    "–ù–∞—á–∞—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º",
                    "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è",
                    "–ù–∞—É—á–∏—Ç—å—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–º"
                ],
                color="#98FB98"
            ),
            "business": DreamCategory(
                id="business",
                name="–ë–∏–∑–Ω–µ—Å –∏ –∫–∞—Ä—å–µ—Ä–∞",
                description="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
                emoji="üíº",
                examples=[
                    "–ù–∞—á–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å",
                    "–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é",
                    "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ",
                    "–ù–∞–π—Ç–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞",
                    "–†–∞–∑–≤–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏"
                ],
                color="#F0E68C"
            ),
            "adventure": DreamCategory(
                id="adventure",
                name="–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ —ç–∫—Å—Ç—Ä–∏–º",
                description="–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
                emoji="üèîÔ∏è",
                examples=[
                    "–ü—Ä—ã–∂–æ–∫ —Å –ø–∞—Ä–∞—à—é—Ç–æ–º",
                    "–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ",
                    "–î–∞–π–≤–∏–Ω–≥",
                    "–†–∞—Ñ—Ç–∏–Ω–≥",
                    "–ü–∞—Ä–∞–ø–ª–∞–Ω–µ—Ä–∏–∑–º"
                ],
                color="#FF8C00"
            )
        }
    
    def get_category(self, category_id: str) -> Optional[DreamCategory]:
        """Get category by ID."""
        return self.categories.get(category_id)
    
    def get_all_categories(self) -> List[DreamCategory]:
        """Get all available categories."""
        return list(self.categories.values())
    
    def get_categories_by_popularity(self, limit: int = 5) -> List[DreamCategory]:
        """Get most popular categories (placeholder for future implementation)."""
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        return list(self.categories.values())[:limit]
    
    def search_categories(self, query: str) -> List[DreamCategory]:
        """Search categories by name or description."""
        query = query.lower()
        results = []
        
        for category in self.categories.values():
            if (query in category.name.lower() or 
                query in category.description.lower() or
                any(query in example.lower() for example in category.examples)):
                results.append(category)
        
        return results
    
    def get_category_stats(self) -> Dict[str, int]:
        """Get basic statistics for categories (placeholder)."""
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        return {cat.id: 0 for cat in self.categories.values()}
    
    def get_random_examples(self, category_id: str, count: int = 3) -> List[str]:
        """Get random examples for a category."""
        category = self.get_category(category_id)
        if not category:
            return []
        
        import random
        examples = category.examples.copy()
        random.shuffle(examples)
        return examples[:count]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
category_system = DreamCategorySystem()
