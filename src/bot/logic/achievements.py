"""Achievements router for Wanty bot."""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.bot.structures.keyboards.menu import MENU_KEYBOARD, ADDITIONAL_FEATURES_MARKUP
from src.bot.structures.keyboards.dreams import CATEGORIES_MARKUP
from src.bot.structures.achievements import achievement_system
from src.bot.structures.dream_categories import category_system

import logging

achievements_router = Router(name='achievements')


@achievements_router.message(Command(commands='achievements'))
@achievements_router.message(F.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def achievements_handler(message: types.Message, db):
    """Show user achievements and progress."""
    user_id = message.from_user.id
    
    user = await db.user.user_register_check(active_user_id=user_id)
    
    if not user:
        logging.warning(f"User {user_id} not found in database")
        await message.answer(
            "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=MENU_KEYBOARD,
            parse_mode="MARKDOWN"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_progress = await db.progress.get_user_progress(user_id)
    if not user_progress:
        # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        user_progress = await db.progress.create_user_progress(user_id)
    
    user_stats = {
        "total_dreams": user_progress.total_dreams,
        "total_likes_received": user_progress.total_likes_received,
        "total_dreams_viewed": user_progress.total_dreams_viewed,
        "total_likes_given": user_progress.total_likes_given,
        "consecutive_days": user_progress.consecutive_days,
        "users_helped": user_progress.users_helped
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
    progress = achievement_system.get_user_progress(user_stats)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    unlocked_count = sum(1 for p in progress.values() if p["is_unlocked"])
    total_count = len(progress)
    total_points = sum(p["achievement"].points for p in progress.values() if p["is_unlocked"])
    
    achievements_text = (
        f"üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è {user.name}** üèÜ\n\n"
        f"**üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: **{unlocked_count}/{total_count}**\n"
        f"‚Ä¢ –û–±—â–∏–µ –æ—á–∫–∏: **{user_progress.total_points}**\n"
        f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: **{round((unlocked_count/total_count)*100, 1)}%**\n\n"
        
        "**üåü –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    unlocked_achievements = [p for p in progress.values() if p["is_unlocked"]]
    if unlocked_achievements:
        for progress_data in unlocked_achievements:
            achievement = progress_data["achievement"]
            achievements_text += (
                f"{achievement.emoji} **{achievement.name}** - {achievement.points} –æ—á–∫–æ–≤\n"
                f"   {achievement.description}\n\n"
            )
    else:
        achievements_text += "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    locked_achievements = [p for p in progress.values() if not p["is_unlocked"]]
    if locked_achievements:
        achievements_text += "**üéØ –ë–ª–∏–∂–∞–π—à–∏–µ —Ü–µ–ª–∏:**\n"
        for progress_data in locked_achievements[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –±–ª–∏–∂–∞–π—à–∏—Ö
            achievement = progress_data["achievement"]
            current = progress_data["current_value"]
            required = progress_data["required_value"]
            percentage = progress_data["progress_percentage"]
            
            achievements_text += (
                f"{achievement.emoji} **{achievement.name}**\n"
                f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{required} ({percentage:.1f}%)\n"
                f"   {achievement.requirement}\n\n"
            )
    
    achievements_text += "**üí° –°–æ–≤–µ—Ç:** –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω—ã–º, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!"
    
    await message.answer(
        achievements_text,
        reply_markup=MENU_KEYBOARD,
        parse_mode="MARKDOWN"
    )


@achievements_router.message(Command(commands='categories'))
@achievements_router.message(F.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def categories_handler(message: types.Message):
    """Show dream categories."""
    categories = category_system.get_all_categories()
    
    categories_text = (
        "üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–µ–ª–∞–Ω–∏–π** üìÇ\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–Ω–∏–π:\n\n"
    )
    
    for category in categories:
        categories_text += (
            f"{category.emoji} **{category.name}**\n"
            f"   {category.description}\n\n"
        )
    
    categories_text += "**üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
    categories_text += "‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–Ω–∏–π\n"
    categories_text += "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π –∂–µ–ª–∞–Ω–∏—è –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n"
    categories_text += "‚Ä¢ –ò—â–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"
    
    await message.answer(
        categories_text,
        reply_markup=CATEGORIES_MARKUP,
        parse_mode="MARKDOWN"
    )


@achievements_router.message(F.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def categories_text_handler(message: types.Message):
    """Handle categories button press."""
    await categories_handler(message)


@achievements_router.message(F.text == "üîô –ù–∞–∑–∞–¥ –∫ –∂–µ–ª–∞–Ω–∏—è–º")
async def back_to_dreams_handler(message: types.Message):
    """Return to dreams main menu."""
    back_text = (
        "üîô **–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∂–µ–ª–∞–Ω–∏—è–º** üîô\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–Ω–∏–π.\n\n"
        "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è\n"
        "‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è\n"
        "‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–Ω–∏–π
    from src.bot.structures.keyboards.dreams import DREAMS_MAIN_INLINE_MARKUP
    
    await message.answer(
        back_text,
        reply_markup=DREAMS_MAIN_INLINE_MARKUP,
        parse_mode="MARKDOWN"
    )


@achievements_router.callback_query(lambda c: c.data.startswith("cat_"))
async def category_callback(callback_query: types.CallbackQuery):
    """Handle category selection."""
    category_id = callback_query.data.replace("cat_", "")
    category = category_system.get_category(category_id)
    
    if not category:
        await callback_query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await callback_query.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∂–µ–ª–∞–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    examples = category_system.get_random_examples(category_id, 3)
    
    category_text = (
        f"{category.emoji} **{category.name}** {category.emoji}\n\n"
        f"**üìù –û–ø–∏—Å–∞–Ω–∏–µ:**\n{category.description}\n\n"
        "**üí≠ –ü—Ä–∏–º–µ—Ä—ã –∂–µ–ª–∞–Ω–∏–π:**\n"
    )
    
    for example in examples:
        category_text += f"‚Ä¢ {example}\n"
    
    category_text += f"\n**üîç –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–µ–ª–∞–Ω–∏—è –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?**\n"
    category_text += "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    from src.bot.structures.keyboards.dreams import CATEGORIES_MARKUP
    
    await callback_query.message.answer(
        category_text,
        reply_markup=CATEGORIES_MARKUP,
        parse_mode="MARKDOWN"
    )


@achievements_router.message(Command(commands='stats'))
@achievements_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: types.Message, db):
    """Show user statistics."""
    user_id = message.from_user.id
    
    user = await db.user.user_register_check(active_user_id=user_id)
    
    if not user:
        logging.warning(f"User {user_id} not found in database")
        await message.answer(
            "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=MENU_KEYBOARD,
            parse_mode="MARKDOWN"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_progress = await db.progress.get_user_progress(user_id)
    if not user_progress:
        # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        user_progress = await db.progress.create_user_progress(user_id)
    
    user_stats = {
        "total_dreams": user_progress.total_dreams,
        "total_likes_received": user_progress.total_likes_received,
        "total_dreams_viewed": user_progress.total_dreams_viewed,
        "total_likes_given": user_progress.total_likes_given,
        "consecutive_days": user_progress.consecutive_days,
        "users_helped": user_progress.users_helped
    }
    
    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.name}** üìä\n\n"
        f"**üéØ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: **{user_stats['total_dreams']}**\n"
        f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –ª–∞–π–∫–æ–≤: **{user_stats['total_likes_received']}**\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: **{round(user_stats['total_likes_received'] / max(user_stats['total_dreams'], 1), 1)}**\n\n"
        
        f"**üëÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∂–µ–ª–∞–Ω–∏–π: **{user_stats['total_dreams_viewed']}**\n"
        f"‚Ä¢ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤: **{user_stats['total_likes_given']}**\n"
        f"‚Ä¢ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: **{user_stats['consecutive_days']}**\n\n"
        
        f"**üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
        f"‚Ä¢ –û–±—â–∏–µ –æ—á–∫–∏: **{user_progress.total_points}**\n\n"
        
        f"**ü§ù –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:**\n"
        f"‚Ä¢ –ü–æ–º–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: **{user_stats['users_helped']}**\n\n"
        
        "**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π –±–æ–ª—å—à–µ –∂–µ–ª–∞–Ω–∏–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω—ã–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏ –æ—Ü–µ–Ω–∫–µ\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞–π –¥—Ä—É–≥–∏–º –Ω–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤"
    )
    
    await message.answer(
        stats_text,
        reply_markup=MENU_KEYBOARD,
        parse_mode="MARKDOWN"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–¥–∏–Ω –æ–±—â–∏–π
@achievements_router.message(F.text.in_([
    "üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "‚öΩ –°–ø–æ—Ä—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "üçΩÔ∏è –ö—É–ª–∏–Ω–∞—Ä–∏—è –∏ –µ–¥–∞", "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "üìö –û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ", "üë• –û–±—â–µ–Ω–∏–µ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ", "üßò –ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ",
    "üíº –ë–∏–∑–Ω–µ—Å –∏ –∫–∞—Ä—å–µ—Ä–∞", "üèîÔ∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ —ç–∫—Å—Ç—Ä–∏–º",
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    "‚öΩ –°–ø–æ—Ä—Ç", "üçΩÔ∏è –ö—É–ª–∏–Ω–∞—Ä–∏—è", "üìö –û–±—É—á–µ–Ω–∏–µ", "üë• –û–±—â–µ–Ω–∏–µ", "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "üßò –ó–¥–æ—Ä–æ–≤—å–µ", "üíº –ë–∏–∑–Ω–µ—Å", "üèîÔ∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"
]))
async def category_button_handler(message: types.Message):
    """Handle all category button presses."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    category_name = message.text
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏)
    clean_name = category_name.split(' ', 1)[1] if ' ' in category_name else category_name
    
    categories = category_system.get_all_categories()
    category = None
    
    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    for cat in categories:
        if (clean_name.lower() in cat.name.lower() or 
            cat.name.lower().startswith(clean_name.lower())):
            category = cat
            break
    
    if category:
        await _show_category_details(message, category)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        available_categories = [f"‚Ä¢ {cat.name}" for cat in categories]
        debug_text = (
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{clean_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n" + "\n".join(available_categories) + "\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
        )
        await message.answer(
            debug_text,
            reply_markup=MENU_KEYBOARD
        )


async def _show_category_details(message: types.Message, category):
    """Show detailed information about a category."""
    if not category:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∂–µ–ª–∞–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    examples = category_system.get_random_examples(category.id, 3)
    
    category_text = (
        f"{category.emoji} **{category.name}** {category.emoji}\n\n"
        f"**üìù –û–ø–∏—Å–∞–Ω–∏–µ:**\n{category.description}\n\n"
        "**üí≠ –ü—Ä–∏–º–µ—Ä—ã –∂–µ–ª–∞–Ω–∏–π:**\n"
    )
    
    for example in examples:
        category_text += f"‚Ä¢ {example}\n"
    
    category_text += f"\n**üîç –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–µ–ª–∞–Ω–∏—è –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?**\n"
    category_text += "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    from src.bot.structures.keyboards.dreams import CATEGORIES_MARKUP
    
    await message.answer(
        category_text,
        reply_markup=CATEGORIES_MARKUP,
        parse_mode="MARKDOWN"
    )

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
@achievements_router.callback_query(lambda c: c.data == "show_achievements")
async def show_achievements_callback(callback_query: types.CallbackQuery, db):
    """Show achievements via callback."""
    await callback_query.answer()
    
    # –°–æ–∑–¥–∞–µ–º mock message –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id
    mock_message = type('MockMessage', (), {
        'from_user': type('MockUser', (), {
            'id': callback_query.from_user.id,
            'username': callback_query.from_user.username,
            'first_name': callback_query.from_user.first_name
        })(),
        'answer': callback_query.message.answer
    })()
    
    await achievements_handler(mock_message, db)


@achievements_router.callback_query(lambda c: c.data == "show_categories")
async def show_categories_callback(callback_query: types.CallbackQuery):
    """Show categories via callback."""
    await callback_query.answer()
    await categories_handler(callback_query.message)


@achievements_router.callback_query(lambda c: c.data == "show_stats")
async def show_stats_callback(callback_query: types.CallbackQuery, db):
    """Show stats via callback."""
    await callback_query.answer()
    
    # –°–æ–∑–¥–∞–µ–º mock message –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id
    mock_message = type('MockMessage', (), {
        'from_user': type('MockUser', (), {
            'id': callback_query.from_user.id,
            'username': callback_query.from_user.username,
            'first_name': callback_query.from_user.first_name
        })(),
        'answer': callback_query.message.answer
    })()
    
    await stats_handler(mock_message, db)


@achievements_router.callback_query(lambda c: c.data == "show_help")
async def show_help_callback(callback_query: types.CallbackQuery):
    """Show help via callback."""
    await callback_query.answer()
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º help_handler –∏–∑ help.py
    from src.bot.logic.help import help_handler
    await help_handler(callback_query.message)


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
@achievements_router.callback_query(lambda c: c.data == "create_dream")
async def create_dream_callback(callback_query: types.CallbackQuery):
    """Create dream via callback."""
    await callback_query.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è")
    await callback_query.message.answer(
        "üí≠ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è** üí≠\n\n"
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è:",
        reply_markup=MENU_KEYBOARD,
        parse_mode="MARKDOWN"
    )


@achievements_router.callback_query(lambda c: c.data == "find_dreams")
async def find_dreams_callback(callback_query: types.CallbackQuery):
    """Find dreams via callback."""
    await callback_query.answer("–ü–æ–∏—Å–∫ –∂–µ–ª–∞–Ω–∏–π")
    await callback_query.message.answer(
        "üîç **–ü–æ–∏—Å–∫ –∂–µ–ª–∞–Ω–∏–π** üîç\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ñ–µ–ª–∞–Ω–∏—è' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π!",
        reply_markup=MENU_KEYBOARD,
        parse_mode="MARKDOWN"
    )


@achievements_router.callback_query(lambda c: c.data == "show_profile")
async def show_profile_callback(callback_query: types.CallbackQuery, db):
    """Show profile via callback."""
    await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å")
    
    # –°–æ–∑–¥–∞–µ–º mock message –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id
    mock_message = type('MockMessage', (), {
        'from_user': type('MockUser', (), {
            'id': callback_query.from_user.id,
            'username': callback_query.from_user.username,
            'first_name': callback_query.from_user.first_name
        })(),
        'answer': callback_query.message.answer
    })()
    
    from src.bot.logic.profile.select import profile_handler
    await profile_handler(mock_message, db)


@achievements_router.callback_query(lambda c: c.data == "show_my_dreams")
async def show_my_dreams_callback(callback_query: types.CallbackQuery, db):
    """Show my dreams via callback."""
    await callback_query.answer("–ú–æ–∏ –∂–µ–ª–∞–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º mock message –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id
    mock_message = type('MockMessage', (), {
        'from_user': type('MockUser', (), {
            'id': callback_query.from_user.id,
            'username': callback_query.from_user.username,
            'first_name': callback_query.from_user.first_name
        })(),
        'answer': callback_query.message.answer
    })()
    
    from src.bot.logic.profile.select import mydream_handler
    await mydream_handler(mock_message, db)
