"""This file represents a Dreams logic."""
import logging

import emoji
import aiohttp
import hashlib

from aiogram import types
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from src.bot.structures.keyboards.dreams import (
    DREAMS_MAIN_INLINE_MARKUP, 
    DREAMS_NOT_FOUND_INLINE_MARKUP,
    CATEGORY_SELECTION_MARKUP,
    CANCEL_BUTTON,
    REGISTRATION_REQUIRED_MARKUP
)
from src.bot.structures.keyboards.menu import MENU_KEYBOARD

from .router import dreams_router
from src.bot.structures.fsm.dream_create import DreamGroup
from src.bot.structures.fsm.register import RegisterGroup


async def get_image_content(photo, bot, redis_cache=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        photo_file = await bot.get_file(photo.file_id)
        photo_url = photo_file.file_path
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        cache_key = hashlib.md5(photo_url.encode()).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫—ç—à
        if redis_cache:
            cached_image = await redis_cache.get_image_cache(cache_key)
            if cached_image:
                return cached_image
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        bot_token = bot.token
        request_url = f"https://api.telegram.org/file/bot{bot_token}/{photo_url}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(request_url) as response:
                if response.status == 200:
                    image_content = await response.read()
                    # –ö—ç—à–∏—Ä—É–µ–º –≤ Redis
                    if redis_cache:
                        await redis_cache.set_image_cache(cache_key, image_content)
                    return image_content
                    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None
    
    return None


@dreams_router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state is not None:
        await state.clear()
        await message.answer(f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ {emoji.emojize(':smiling_face_with_tear:')}",
                             reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP)


@dreams_router.message(F.text.lower().startswith('—Å–æ–∑–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ'))
async def process_create_command(message: types.Message, state: FSMContext, db):
    user = await db.user.user_register_check(active_user_id=message.from_user.id)

    if user:
        await state.set_state(DreamGroup.name)
        create_dream_text = (
            "‚ú® **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è** ‚ú®\n\n"
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç –¥—Ä—É–≥–∏—Ö!\n\n"
            "**üéØ –ó–∞—á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è:**\n"
            "‚Ä¢ –ù–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –æ—á–∫–∏\n"
            "‚Ä¢ –í–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏—Ö\n"
            "‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º–µ—á—Ç—ã\n\n"
            "**–®–∞–≥ 1 –∏–∑ 5: –ù–∞–∑–≤–∞–Ω–∏–µ** üìù\n"
            "–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —è—Ä–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è.\n\n"
            "**üí° –ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ –•–æ—á—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–∞–º\n"
            "‚Ä¢ –ú–µ—á—Ç–∞—é –Ω–∞—É—á–∏—Ç—å—Å—è –∏–≥—Ä–∞—Ç—å –Ω–∞ –≥–∏—Ç–∞—Ä–µ\n"
            "‚Ä¢ –ò—â—É –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø–æ—Ö–æ–¥–∞ –≤ –≥–æ—Ä—ã\n\n"
            "**–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ:**"
        )
        
        return await message.answer(
            create_dream_text,
            reply_markup=CANCEL_BUTTON,
            parse_mode="MARKDOWN"
        )
    else:
        await state.set_state(RegisterGroup.age)
        register_text = (
            "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n\n"
            "**üìù –ß—Ç–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:**\n"
            "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç\n"
            "‚Ä¢ –ü–æ–ª\n"
            "‚Ä¢ –ì–æ—Ä–æ–¥\n"
            "‚Ä¢ –ò–º—è\n\n"
                    "**üéØ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—ã —Å–º–æ–∂–µ—à—å:**\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—á–∫–∏ (+15 –∑–∞ –∫–∞–∂–¥–æ–µ)\n"
        "‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –ò–∑—É—á–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–µ–ª–∞–Ω–∏–π\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
            "**üöÄ –ù–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?**\n"
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ."
        )
        
        return await message.answer(
            register_text,
            reply_markup=CANCEL_BUTTON,
            parse_mode="MARKDOWN"
        )


@dreams_router.message(DreamGroup.name)
async def dream_name_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(DreamGroup.category)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from src.bot.structures.keyboards.dreams import CATEGORY_SELECTION_MARKUP
    
    category_text = (
        "üìÇ **–®–∞–≥ 2 –∏–∑ 5: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏** üìÇ\n\n"
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è.\n\n"
        "**üéØ –ó–∞—á–µ–º –Ω—É–∂–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:**\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –£–ø—Ä–æ—â–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
        "‚Ä¢ –î–∞–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é\n\n"
        "**üí° –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:**"
    )

    await message.answer(
        category_text, 
        reply_markup=CATEGORY_SELECTION_MARKUP, 
        parse_mode="MARKDOWN"
    )


@dreams_router.message(DreamGroup.category)
async def dream_category_handler(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(DreamGroup.description)

    description_text = (
        "üìù **–®–∞–≥ 3 –∏–∑ 5: –û–ø–∏—Å–∞–Ω–∏–µ** üìù\n\n"
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–µ–º –∂–µ–ª–∞–Ω–∏–∏.\n\n"
        "**üí≠ –ß—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**\n"
        "‚Ä¢ –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ–±—è\n"
        "‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –∏ –≥–¥–µ —ç—Ç–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å\n"
        "‚Ä¢ –ö–∞–∫–∞—è –ø–æ–º–æ—â—å –Ω—É–∂–Ω–∞\n\n"
        "**üí° –ü—Ä–∏–º–µ—Ä:**\n"
        "–•–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è –∏–≥—Ä–∞—Ç—å –Ω–∞ –≥–∏—Ç–∞—Ä–µ. –ò—â—É —É—á–∏—Ç–µ–ª—è –∏–ª–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π. "
        "–ú–æ–≥—É –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø–æ –≤–µ—á–µ—Ä–∞–º –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞. –ì–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Ä–æ–∫–∏ –∏–ª–∏ –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∞–≤—ã–∫–∞–º–∏."
    )

    await message.answer(description_text, reply_markup=CANCEL_BUTTON, parse_mode="MARKDOWN")


@dreams_router.message(DreamGroup.description)
async def dream_description_handler(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(DreamGroup.image)

    image_text = (
        "üñºÔ∏è **–®–∞–≥ 4 –∏–∑ 5: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ** üñºÔ∏è\n\n"
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é.\n\n"
        "**üì∏ –ó–∞—á–µ–º –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ:**\n"
        "‚Ä¢ –ü—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ\n"
        "‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n\n"
        "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:**\n"
        "‚Ä¢ –§–æ—Ç–æ –º–µ—Å—Ç–∞, –≥–¥–µ —Ö–æ—á–µ—à—å –ø–æ–±—ã–≤–∞—Ç—å\n"
        "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≥–æ, —á–µ–º—É —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è\n"
        "‚Ä¢ –ö–∞—Ä—Ç–∏–Ω–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç\n\n"
        "**‚ö†Ô∏è –í–∞–∂–Ω–æ:** –§–æ—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –æ—á–µ–Ω—å –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ!\n\n"
        "**üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
    )
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    from src.bot.structures.keyboards.dreams import CANCEL_BUTTON
    
    image_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üñºÔ∏è –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_without_image")]
        ]
    )
    
    await message.answer(
        image_text,
        reply_markup=image_markup,
        parse_mode="MARKDOWN"
    )


@dreams_router.message(DreamGroup.image)
async def dream_image_handler(message: Message, state: FSMContext, db, redis_cache=None):
    data = await state.get_data()
    description = data.get('description', '')
    category = data.get('category', '')

    dream_image = None
    if message.photo:
        photo = message.photo[-1]
        # –ü–µ—Ä–µ–¥–∞–µ–º bot –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
        dream_image = await get_image_content(photo, message.bot, redis_cache)
    elif message.text and message.text.lower() == "–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–æ–∑–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        dream_image = None
    else:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ "–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é
        await message.answer(
            "üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:**\n\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è\n"
            "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üñºÔ∏è –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_without_image")]
                ]
            ),
            parse_mode="MARKDOWN"
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∂–µ–ª–∞–Ω–∏–µ
    try:
        await db.dream.new(
            user_id=message.from_user.id,
            username=message.from_user.username,
            image=dream_image,
            name=data.get('name', ''),
            description=description,
            category=category
        )
    except Exception as e:
        logging.error(f"Error creating dream: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    try:
        await db.progress.increment_dreams(message.from_user.id, 15)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤—ã–π —à–∞–≥"
        if not await db.achievements.is_achievement_unlocked(message.from_user.id, "first_dream"):
            await db.achievements.unlock_achievement(message.from_user.id, "first_dream", 10)
            await db.progress.increment_dreams(message.from_user.id, 10)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    except Exception as e:
        logging.warning(f"Could not update achievements for user {message.from_user.id}: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    
    await state.clear()
    success_text = (
        "üéâ **–ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!** üéâ\n\n"
        f"**üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n\n"
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Wanty.\n\n"
        "**üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
        "‚Ä¢ +15 –æ—á–∫–æ–≤ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n\n"
        "**‚ú® –ß—Ç–æ –¥–∞–ª—å—à–µ?**\n"
        "‚Ä¢ –ñ–¥–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –æ—Ç –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–∞—Ö\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –∂–µ–ª–∞–Ω–∏—è\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö\n\n"
        "**üí° –°–æ–≤–µ—Ç:** –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω—ã–º! –ß–µ–º –±–æ–ª—å—à–µ —Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—à—å —Å –¥—Ä—É–≥–∏–º–∏, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
    )
    
    await message.answer(
        success_text,
        reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP,
        parse_mode="MARKDOWN"
    )


# –£–±–∏—Ä–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º Redis –∫—ç—à


async def edit_message_with_dream(message, dream, db, user=None):
    """Edit existing message with new dream content."""
    try:
        dream_user = await db.user.get_user_by_id(user_id=dream.user_id)
        user_gender = emoji.emojize(':man:') if dream_user and dream_user.gender == '–ú—É–∂—á–∏–Ω–∞' else emoji.emojize(':woman:')
        formatted_date = dream.created_at.strftime("%d.%m.%Y")

        text = (
            f"\n*–¢–µ–º–∞*: {dream.name}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ*: {dream.description}\n"
            f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è*: {dream.category if dream.category else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"*–ì–æ—Ä–æ–¥*: {dream_user.country if dream_user else '–î—Ä—É–≥–æ–π'}\n"
            f"*–ê–≤—Ç–æ—Ä*: {dream_user.name if dream_user else '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'} {user_gender}\n"
            f"*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è*: {formatted_date}"
        )

        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user:
            # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫
            from src.bot.structures.keyboards.dreams import DREAMS_MAIN_INLINE_MARKUP
            reply_markup = DREAMS_MAIN_INLINE_MARKUP
        else:
            # –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            from src.bot.structures.keyboards.dreams import REGISTRATION_REQUIRED_MARKUP
            reply_markup = REGISTRATION_REQUIRED_MARKUP

        if dream.image:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            await message.bot.send_photo(
                message.chat.id,
                types.BufferedInputFile(dream.image, filename=f"user_photo_{dream.id}.png"),
                caption=text,
                reply_markup=reply_markup,
                parse_mode='MARKDOWN'
            )
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.delete()
            except Exception as e:
                logging.warning(f"Could not delete old message: {e}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await message.edit_text(
                text,
                reply_markup=reply_markup,
                parse_mode='MARKDOWN'
            )
            
    except Exception as e:
        logging.error(f"Error editing message with dream: {e}")
        raise e


async def dreams_view_func(dream, message, db, user=None):
    if not dream:
        no_dreams_text = (
            "üòî **–ë–æ–ª—å—à–µ –∂–µ–ª–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ** üòî\n\n"
            "–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n"
            "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ (+15 –æ—á–∫–æ–≤)\n"
            "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "**üåü –°–æ–≤–µ—Ç:** –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏—Ö! –≠—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –æ—á–∫–∏ –∏ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
        )
        from src.bot.structures.keyboards.dreams import DREAMS_NOT_FOUND_INLINE_MARKUP
        await message.answer(no_dreams_text, reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP, parse_mode="MARKDOWN")
        return

    dream_user = await db.user.get_user_by_id(user_id=dream.user_id)
    user_gender = emoji.emojize(':man:') if dream_user and dream_user.gender == '–ú—É–∂—á–∏–Ω–∞' else emoji.emojize(':woman:')
    formatted_date = dream.created_at.strftime("%d.%m.%Y")

    text = (
        f"\n*–¢–µ–º–∞*: {dream.name}\n"
        f"*–û–ø–∏—Å–∞–Ω–∏–µ*: {dream.description}\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è*: {dream.category if dream.category else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"*–ì–æ—Ä–æ–¥*: {dream_user.country if dream_user else '–î—Ä—É–≥–æ–π'}\n"
        f"*–ê–≤—Ç–æ—Ä*: {dream_user.name if dream_user else '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'} {user_gender}\n"
        f"*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è*: {formatted_date}"
    )

    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user:
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫
        from src.bot.structures.keyboards.dreams import DREAMS_MAIN_INLINE_MARKUP
        reply_markup = DREAMS_MAIN_INLINE_MARKUP
    else:
        # –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from src.bot.structures.keyboards.dreams import REGISTRATION_REQUIRED_MARKUP
        reply_markup = REGISTRATION_REQUIRED_MARKUP

    if dream.image:
        await message.bot.send_photo(
            message.chat.id,
            types.BufferedInputFile(dream.image, filename=f"user_photo_{dream.id}.png"),
            caption=text,
            reply_markup=reply_markup,
            parse_mode='MARKDOWN'
        )
    else:
        await message.answer(text, reply_markup=reply_markup, parse_mode='MARKDOWN')


@dreams_router.message(F.text.lower().startswith('–∂–µ–ª–∞–Ω–∏—è'))
@dreams_router.message(F.text == f"–ñ–µ–ª–∞–Ω–∏—è {emoji.emojize(':thought_balloon:')}")
@dreams_router.message(Command(commands='dreams'))
async def process_dreams_handler(message: types.Message, state: FSMContext, db, redis_cache=None):
    user_id = message.from_user.id
    user = await db.user.user_register_check(active_user_id=user_id)

    if user:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º offset –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–Ω–∏–π
        if redis_cache:
            await redis_cache.reset_user_offset(user_id)
            logging.info(f"User {user_id} dreams offset reset to 0")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∂–µ–ª–∞–Ω–∏–π
        try:
            await db.progress.increment_dreams_viewed(user_id, 1)
        except Exception as e:
            logging.warning(f"Could not update dreams viewed for user {user_id}: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ —Å–≤–æ–∏)
        dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=0)
        logging.info(f"User {user_id} started viewing dreams, first dream: {dream.name if dream else 'None'}")
        await dreams_view_func(dream=dream, message=message, db=db, user=user)
    else:
        await state.set_state(RegisterGroup.age)
        register_text = (
            "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–Ω–∏–π –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n\n"
            "**üìù –ß—Ç–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:**\n"
            "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç\n"
            "‚Ä¢ –ü–æ–ª\n"
            "‚Ä¢ –ì–æ—Ä–æ–¥\n"
            "‚Ä¢ –ò–º—è\n\n"
            "**üéØ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å:**\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∂–µ–ª–∞–Ω–∏–π\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –æ—á–∫–æ–≤ (+25 –æ—á–∫–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é)\n"
            "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–µ–ª–∞–Ω–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
            "**üöÄ –ù–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?**\n"
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ."
        )
        await message.answer(register_text, reply_markup=CANCEL_BUTTON, parse_mode="MARKDOWN")


async def send_notification_to_author(author_id, dream, message, redis_cache=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–∞—Ö –∞–≤—Ç–æ—Ä—É –∂–µ–ª–∞–Ω–∏—è."""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        if redis_cache:
            liker_info = {
                "username": message.from_user.username,
                "user_id": message.from_user.id,
                "first_name": message.from_user.first_name
            }
            await redis_cache.add_like_notification(author_id, dream.id, liker_info)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            pending_notifications = await redis_cache.get_pending_like_notifications(author_id)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(pending_notifications) == 1:
                await send_grouped_like_notification(author_id, dream, pending_notifications, message.bot, redis_cache)
        else:
            # –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await send_single_like_notification(author_id, dream, message)

    except Exception as e:
        logging.error(f"Error sending notification: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ fallback
        try:
            await send_single_like_notification(author_id, dream, message)
        except Exception as fallback_error:
            logging.error(f"Fallback notification also failed: {fallback_error}")


async def send_grouped_like_notification(author_id, dream, notifications, bot, redis_cache=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∞–π–∫–∞—Ö."""
    try:
        if len(notifications) == 1:
            # –û–¥–∏–Ω –ª–∞–π–∫
            liker = notifications[0]["liker_info"]
            liker_name = liker.get("username", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {liker.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
            
            notification_message = (
                f"üéâ **–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!** üéâ\n\n"
                f"–¢–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ **{dream.name}** –ø–æ–ª—É—á–∏–ª–æ –ª–∞–π–∫! ‚ù§Ô∏è\n\n"
                "**üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
                "‚Ä¢ +5 –æ—á–∫–æ–≤ –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–∞\n"
                "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—á—Ç–∞—Ç–µ–ª—å'\n\n"
                f"**–ö—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è:** {liker_name}\n\n"
                f"**ü§î –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —ç—Ç–æ?**\n"
                f"–ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è."
            )
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –ª–∞–π–∫–æ–≤
            likers_info = []
            for notification in notifications:
                liker = notification["liker_info"]
                liker_name = liker.get("username", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {liker.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
                likers_info.append(f"‚Ä¢ {liker_name}")
            
            notification_message = (
                f"üéâ **–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!** üéâ\n\n"
                f"–¢–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ **{dream.name}** –ø–æ–ª—É—á–∏–ª–æ **{len(notifications)} –ª–∞–π–∫–æ–≤**! ‚ù§Ô∏è\n\n"
                "**üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
                f"‚Ä¢ +{len(notifications) * 5} –æ—á–∫–æ–≤ –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤\n"
                "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—á—Ç–∞—Ç–µ–ª—å'\n\n"
                f"**–ö—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è:**\n" + "\n".join(likers_info) + "\n\n"
                f"**ü§î –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —ç—Ç–æ?**\n"
                f"–ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è."
            )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –ª–∞–π–∫–Ω—É–≤—à–µ–º
        first_liker = notifications[0]["liker_info"]
        liker_username = first_liker.get("username", str(first_liker.get("user_id", "unknown")))
        dream_username = dream.username or str(dream.user_id)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∞–≤—Ç–æ—Ä–∞ –∂–µ–ª–∞–Ω–∏—è –∫–∞–∫ chat_id, —Ç–∞–∫ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä—É
        chat_id = str(dream.user_id)
        dream_id = str(dream.id)
        
        # –°–æ–∑–¥–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        callback_data = f"{liker_username} {dream_username} {chat_id} {dream_id}"
        
        reply_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–î–∞, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', callback_data=f"share_contact_grouped {callback_data}"),
                    InlineKeyboardButton(text='–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ', callback_data=f"not_share_contact_grouped {callback_data}")
                ]
            ]
        )

        await bot.send_message(
            author_id, 
            notification_message, 
            reply_markup=reply_markup,
            parse_mode='MARKDOWN'
        )

    except Exception as e:
        logging.error(f"Error sending grouped notification: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ fallback
        try:
            if len(notifications) > 0:
                first_notification = notifications[0]
                # –°–æ–∑–¥–∞–µ–º mock message –æ–±—ä–µ–∫—Ç –¥–ª—è fallback
                from aiogram.types import Message
                mock_message = type('MockMessage', (), {
                    'from_user': type('MockUser', (), {
                        'username': first_notification.get('liker_info', {}).get('username', 'unknown'),
                        'id': first_notification.get('liker_info', {}).get('user_id', 0),
                        'first_name': first_notification.get('liker_info', {}).get('first_name', 'Unknown')
                    })(),
                    'chat': type('MockChat', (), {'id': author_id})(),
                    'bot': bot
                })()
                await send_single_like_notification(author_id, dream, mock_message)
        except Exception as fallback_error:
            logging.error(f"Fallback notification also failed: {fallback_error}")


async def send_single_like_notification(author_id, dream, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ (fallback)."""
    try:
        notification_message = (
            f"üéâ **–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!** üéâ\n\n"
            f"–¢–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ **{dream.name}** –ø–æ–ª—É—á–∏–ª–æ –ª–∞–π–∫! ‚ù§Ô∏è\n\n"
            "**üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
            "‚Ä¢ +5 –æ—á–∫–æ–≤ –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–∞\n"
            "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—á—Ç–∞—Ç–µ–ª—å'\n\n"
            f"–ö—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è —Ç–≤–æ–µ–π –º–µ—á—Ç–æ–π –∏ —Ö–æ—á–µ—Ç –ø–æ–º–æ—á—å –µ–π —Å–±—ã—Ç—å—Å—è!\n\n"
            f"**ü§î –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —ç—Ç–æ?**\n"
            f"–ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è."
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º callback –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        liker_username = message.from_user.username or str(message.from_user.id)
        dream_username = dream.username or str(dream.user_id)
        chat_id = str(message.chat.id)
        dream_id = str(dream.id)
        
        # –°–æ–∑–¥–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        callback_data = f"{liker_username} {dream_username} {chat_id} {dream_id}"

        reply_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–î–∞', callback_data=f"share_contact {callback_data}"),
                    InlineKeyboardButton(text='–ù–µ—Ç', callback_data=f"not_share_contact {callback_data}")
                ]
            ]
        )

        await message.bot.send_message(
            author_id, 
            notification_message, 
            reply_markup=reply_markup,
            parse_mode='MARKDOWN'
        )

    except Exception as e:
        logging.error(f"Error sending single notification: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        try:
            simple_message = f"üéâ –¢–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ **{dream.name}** –ø–æ–ª—É—á–∏–ª–æ –ª–∞–π–∫! ‚ù§Ô∏è"
            await message.bot.send_message(author_id, simple_message, parse_mode='MARKDOWN')
        except Exception as simple_error:
            logging.error(f"Simple notification also failed: {simple_error}")


async def send_pending_notifications_periodically(bot, db, redis_cache):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–∞—Ö."""
    try:
        if not redis_cache:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–∂–∏–¥–∞—é—â–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        # –≠—Ç–æ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –¥–æ–±–∞–≤–∏–≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Redis
        
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logging.info("Checking for pending notifications...")
        
    except Exception as e:
        logging.error(f"Error in periodic notification sender: {e}")


@dreams_router.callback_query(lambda c: c.data.startswith("share_contact") and not c.data.startswith("share_contact_grouped"))
async def share_contact_callback_handler(callback_query: CallbackQuery, db, redis_cache=None):
    try:
        data_parts = callback_query.data.split(' ')
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"Share contact callback data: {callback_query.data}")
        logging.info(f"Data parts: {data_parts}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if len(data_parts) < 5:
            await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            logging.error(f"Insufficient callback data: {callback_query.data}")
            return
        
        liker_username_id, dream_username_id, chat_id, dream_id = data_parts[1:5]
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f"Parsed data: liker_username_id={liker_username_id}, dream_username_id={dream_username_id}, chat_id={chat_id}, dream_id={dream_id}")

        dream = await db.dream.get_dream_by_id(dream_id=dream_id)
        
        if not dream:
            await callback_query.answer("–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        notification_message = (
            f"–í–æ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å –≤ Telegram, –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ "
            f"–≤–∞—à–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è: {emoji.emojize(':smiling_face_with_hearts:')}\n"
            f"https://t.me/{liker_username_id}"
        )
        notification_for_sender_message = (
            f"–≠—Ç–æ –∞–≤—Ç–æ—Ä –∂–µ–ª–∞–Ω–∏—è *{dream.name}*, –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è: "
            f"{emoji.emojize(':smiling_face_with_hearts:')}\n"
            f"https://t.me/{dream_username_id}"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        logging.info(f"Notification message: {notification_message}")
        logging.info(f"Notification for sender: {notification_for_sender_message}")

        await callback_query.bot.send_message(chat_id, notification_for_sender_message,
                                              reply_markup=MENU_KEYBOARD, parse_mode='MARKDOWN')

        await callback_query.message.bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )

        await db.dream_liked_record.new(
            author_user_id=dream_username_id,
            author_username=dream_username_id,
            liked_user_id=liker_username_id,
            liked_username=liker_username_id,
            dream_name=dream.name,
            type_feedback="share_contact"
        )

        await callback_query.message.answer(notification_message, reply_markup=MENU_KEYBOARD,
                                            parse_mode='MARKDOWN')
            
    except Exception as e:
        logging.error(f"Error in share_contact_callback_handler: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@dreams_router.callback_query(lambda c: c.data.startswith("not_share_contact") and not c.data.startswith("not_share_contact_grouped"))
async def not_share_contact_callback_handler(callback_query: CallbackQuery, db, redis_cache=None):
    """Handle not share contact callback for single notifications."""
    try:
        data_parts = callback_query.data.split(' ')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if len(data_parts) < 5:
            await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            logging.error(f"Insufficient callback data: {callback_query.data}")
            return
        
        liker_username_id, dream_username_id, chat_id, dream_id = data_parts[1:5]
        
        await callback_query.answer("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω")
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback_query.message.edit_reply_markup(reply_markup=None)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        await callback_query.message.answer(
            "üëç **–ü–æ–Ω—è—Ç–Ω–æ!** üëç\n\n"
            "–¢—ã —Ä–µ—à–∏–ª –Ω–µ –¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!\n\n"
            "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
            "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            "–£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π! üöÄ",
            reply_markup=MENU_KEYBOARD,
            parse_mode="MARKDOWN"
        )
        
    except Exception as e:
        logging.error(f"Error in not_share_contact_callback_handler: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@dreams_router.message(F.text.lower() == emoji.emojize(":red_heart:"))
async def process_like_command(message: types.Message, db, redis_cache=None):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
    if message.from_user.is_bot:
        logging.warning(f"Bot tried to like a dream, ignoring")
        return
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.user.check_database_state()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.user.user_register_check(active_user_id=user_id)
    logging.info(f"User {user_id} registration check result: {user}")
    
    if not user:
        logging.warning(f"User {user_id} is not registered, showing registration message")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from src.bot.structures.keyboards.dreams import REGISTRATION_REQUIRED_MARKUP
        
        await message.answer(
            "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
            "–î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–æ–≤ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n\n"
            "**üìù –ß—Ç–æ –¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:**\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –æ—á–∫–æ–≤\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n"
            "**üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**",
            reply_markup=REGISTRATION_REQUIRED_MARKUP,
            parse_mode="MARKDOWN"
        )
        return
    
    logging.info(f"User {user_id} is registered, proceeding with like")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –∫—ç—à –¥–ª—è offset
    offset = await redis_cache.get_user_offset(user_id) if redis_cache else 0
    logging.info(f"User {user_id} liked dream at offset {offset}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=offset)
    
    if not dream:
        await message.answer("–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π")
        return
        
    author_id = dream.user_id if dream else None

    # –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if author_id:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        liker_info = {
            "username": message.from_user.username,
            "user_id": message.from_user.id,
            "first_name": message.from_user.first_name
        }
        
        if redis_cache:
            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            await redis_cache.add_like_notification(author_id, dream.id, liker_info)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            pending_notifications = await redis_cache.get_pending_like_notifications(author_id)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(pending_notifications) == 1:
                await send_grouped_like_notification(author_id, dream, pending_notifications, message.bot, redis_cache)
        else:
            # –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await send_single_like_notification(author_id, dream, message)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ª–∞–π–∫–µ
    if dream:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        try:
            await (
                db.dream_liked_record.new(
                    author_user_id=author_id,
                    liked_user_id=user_id,
                    liked_username=message.from_user.username,
                    dream_name=dream.name,
                    type_feedback="liked"
                ))
        except Exception as e:
            logging.error(f"Error creating like record: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∞–≤—Ç–æ—Ä—É –∂–µ–ª–∞–Ω–∏—è
    if author_id:
        try:
            await db.progress.increment_likes_received(author_id, 5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—á—Ç–∞—Ç–µ–ª—å" (25 –ª–∞–π–∫–æ–≤)
            author_progress = await db.progress.get_user_progress(author_id)
            if author_progress and author_progress.total_likes_received >= 25:
                if not await db.achievements.is_achievement_unlocked(author_id, "popular_dreamer"):
                    await db.achievements.unlock_achievement(author_id, "popular_dreamer", 75)
                    await db.progress.increment_likes_received(author_id, 75)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        except Exception as e:
            logging.warning(f"Could not update achievements for user {author_id}: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —Ç–æ–º—É, –∫—Ç–æ —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = await db.user.user_register_check(active_user_id=user_id)
    if not user:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from src.bot.structures.keyboards.dreams import REGISTRATION_REQUIRED_MARKUP
        
        await message.answer(
            "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
            "–î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–æ–≤ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n\n"
            "**üìù –ß—Ç–æ –¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:**\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –æ—á–∫–æ–≤\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n"
            "**üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**",
            reply_markup=REGISTRATION_REQUIRED_MARKUP,
            parse_mode="MARKDOWN"
        )
        return
    
    try:
        await db.progress.increment_likes_given(user_id, 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–û–±—â–∏—Ç–µ–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞" (100 –ª–∞–π–∫–æ–≤)
        user_progress = await db.progress.get_user_progress(user_id)
        if user_progress and user_progress.total_likes_given >= 100:
            if not await db.achievements.is_achievement_unlocked(user_id, "social_butterfly"):
                await db.achievements.unlock_achievement(user_id, "social_butterfly", 60)
                await db.progress.increment_likes_given(user_id, 60)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    except Exception as e:
        logging.warning(f"Could not update achievements for user {user_id}: {e}")

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è
    if redis_cache:
        new_offset = await redis_cache.increment_user_offset(user_id)
        logging.info(f"User {user_id} offset incremented to {new_offset}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π offset –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        next_dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=new_offset)
    else:
        # –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π offset + 1
        next_dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=offset + 1)
    
    # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not next_dream:
        no_more_dreams_text = (
            "üòî **–ë–æ–ª—å—à–µ –∂–µ–ª–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ** üòî\n\n"
            "–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n"
            "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ (+15 –æ—á–∫–æ–≤)\n"
            "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "**üåü –°–æ–≤–µ—Ç:** –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏—Ö! –≠—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –æ—á–∫–∏ –∏ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
        )
        from src.bot.structures.keyboards.dreams import DREAMS_NOT_FOUND_INLINE_MARKUP
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        try:
            await message.edit_text(
                no_more_dreams_text,
                reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP,
                parse_mode="MARKDOWN"
            )
        except Exception as e:
            logging.warning(f"Could not edit message, sending new one: {e}")
            await message.answer(no_more_dreams_text, reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP, parse_mode="MARKDOWN")
        return
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Å—Ç–∞—Ä–æ–µ –∂–µ–ª–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ
    try:
        await edit_message_with_dream(message, next_dream, db, user)
    except Exception as e:
        logging.warning(f"Could not edit message, sending new one: {e}")
        await dreams_view_func(dream=next_dream, message=message, db=db, user=user)


@dreams_router.message(F.text.lower() == emoji.emojize(":thumbs_down:"))
async def process_dislike_command(message: types.Message, db, redis_cache=None):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
    if message.from_user.is_bot:
        logging.warning(f"Bot tried to dislike a dream, ignoring")
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.user.user_register_check(active_user_id=user_id)
    if not user:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from src.bot.structures.keyboards.dreams import REGISTRATION_REQUIRED_MARKUP
        
        await message.answer(
            "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
            "–î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n\n"
            "**üìù –ß—Ç–æ –¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:**\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –æ—á–∫–æ–≤\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n"
            "**üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**",
            reply_markup=REGISTRATION_REQUIRED_MARKUP,
            parse_mode="MARKDOWN"
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –∫—ç—à –¥–ª—è offset
    offset = await redis_cache.get_user_offset(user_id) if redis_cache else 0
    logging.info(f"User {user_id} disliked dream at offset {offset}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=offset)
    
    if not dream:
        await message.answer("–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.user.user_register_check(active_user_id=user_id)
    if not user:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from src.bot.structures.keyboards.dreams import REGISTRATION_REQUIRED_MARKUP
        
        await message.answer(
            "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
            "–î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n\n"
            "**üìù –ß—Ç–æ –¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:**\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –æ—á–∫–æ–≤\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n"
            "**üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**",
            reply_markup=REGISTRATION_REQUIRED_MARKUP,
            parse_mode="MARKDOWN"
        )
        return
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è
    if redis_cache:
        new_offset = await redis_cache.increment_user_offset(user_id)
        logging.info(f"User {user_id} offset incremented to {new_offset}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π offset –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        next_dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=new_offset)
    else:
        # –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π offset + 1
        next_dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=offset + 1)
    
    # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not next_dream:
        no_more_dreams_text = (
            "üòî **–ë–æ–ª—å—à–µ –∂–µ–ª–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ** üòî\n\n"
            "–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n"
            "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ (+15 –æ—á–∫–æ–≤)\n"
            "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "**üåü –°–æ–≤–µ—Ç:** –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏—Ö! –≠—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –æ—á–∫–∏ –∏ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
        )
        from src.bot.structures.keyboards.dreams import DREAMS_NOT_FOUND_INLINE_MARKUP
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        try:
            await message.edit_text(
                no_more_dreams_text,
                reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP,
                parse_mode="MARKDOWN"
            )
        except Exception as e:
            logging.warning(f"Could not edit message, sending new one: {e}")
            await message.answer(no_more_dreams_text, reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP, parse_mode="MARKDOWN")
        return
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Å—Ç–∞—Ä–æ–µ –∂–µ–ª–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ
    try:
        await edit_message_with_dream(message, next_dream, db, user)
    except Exception as e:
        logging.warning(f"Could not edit message, sending new one: {e}")
        await dreams_view_func(dream=next_dream, message=message, db=db, user=user)


@dreams_router.message(F.text.lower() == emoji.emojize(":ZZZ:"))
async def process_sleep_command(message: types.Message, db):
    user = await db.user.user_register_check(active_user_id=message.from_user.id)

    user_name = user.name or message.from_user.first_name
    message_text = (
        f"üò¥ **–ü—Ä–∏–≤–µ—Ç, {user_name}!** üò¥\n\n"
        "–í–∏–¥–∏–º–æ, —Ç—ã —É—Å—Ç–∞–ª –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–Ω–∏–π. –û—Ç–¥–æ—Ö–Ω–∏ –Ω–µ–º–Ω–æ–≥–æ!\n\n"
        "**üí§ –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –∂–µ–ª–∞–Ω–∏—è\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∂–µ–ª–∞–Ω–∏—è–º–∏\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "**üí° –°–æ–≤–µ—Ç:** –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–π —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ!"
    )

    await message.answer(message_text, reply_markup=MENU_KEYBOARD, parse_mode="MARKDOWN")


@dreams_router.message(F.text.lower() == "üîÑ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
async def process_restart_command(message: types.Message, db, redis_cache=None):
    user_id = message.from_user.id
    user = await db.user.user_register_check(active_user_id=user_id)

    if user:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º offset –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        if redis_cache:
            await redis_cache.reset_user_offset(user_id)
        
        restart_text = (
            "üîÑ **–ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!** üîÑ\n\n"
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã —Å–Ω–æ–≤–∞ –±—É–¥–µ—à—å –≤–∏–¥–µ—Ç—å –≤—Å–µ –∂–µ–ª–∞–Ω–∏—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.\n\n"
            "**üí° –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:**\n"
            "‚Ä¢ –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–±—Ä–æ—à–µ–Ω\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ\n"
            "‚Ä¢ –ú–æ–∂–µ—à—å –∑–∞–Ω–æ–≤–æ –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ –∂–µ–ª–∞–Ω–∏—è\n\n"
            "**üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä:**"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ
        dream = await db.dream.get_dream(user_id=user_id, offset=0)
        await message.answer(restart_text, parse_mode="MARKDOWN")
        await dreams_view_func(dream=dream, message=message, db=db, user=user)
    else:
        await message.answer(
            "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–Ω–∏–π –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=MENU_KEYBOARD,
            parse_mode="MARKDOWN"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è
@dreams_router.callback_query(lambda c: c.data.startswith("cat_"))
async def category_selection_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """Handle category selection during dream creation."""
    category_id = callback_query.data.replace("cat_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from src.bot.structures.dream_categories import category_system
    category = category_system.get_category(category_id)
    
    if not category:
        await callback_query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.update_data(category=category.name)
    await state.set_state(DreamGroup.description)
    
    await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    description_text = (
        f"üìù **–®–∞–≥ 3 –∏–∑ 5: –û–ø–∏—Å–∞–Ω–∏–µ** üìù\n\n"
        f"–û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è **{category.name}** –≤—ã–±—Ä–∞–Ω–∞.\n\n"
        "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–µ–º –∂–µ–ª–∞–Ω–∏–∏.\n\n"
        "**üí≠ –ß—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å:**\n"
        "‚Ä¢ –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ–±—è\n"
        "‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –∏ –≥–¥–µ —ç—Ç–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å\n"
        "‚Ä¢ –ö–∞–∫–∞—è –ø–æ–º–æ—â—å –Ω—É–∂–Ω–∞\n\n"
        "**üí° –ü—Ä–∏–º–µ—Ä:**\n"
        "–•–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è –∏–≥—Ä–∞—Ç—å –Ω–∞ –≥–∏—Ç–∞—Ä–µ. –ò—â—É —É—á–∏—Ç–µ–ª—è –∏–ª–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π. "
        "–ú–æ–≥—É –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø–æ –≤–µ—á–µ—Ä–∞–º –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞. –ì–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Ä–æ–∫–∏ –∏–ª–∏ –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∞–≤—ã–∫–∞–º–∏."
    )

    await callback_query.message.answer(
        description_text, 
        reply_markup=CANCEL_BUTTON, 
        parse_mode="MARKDOWN"
    )


@dreams_router.callback_query(lambda c: c.data.startswith("share_contact_grouped"))
async def share_contact_grouped_callback_handler(callback_query: CallbackQuery, db, redis_cache=None):
    """Handle grouped share contact callback."""
    try:
        # –ü–∞—Ä—Å–∏–º callback –¥–∞–Ω–Ω—ã–µ: "share_contact_grouped {liker_username} {dream_username} {chat_id} {dream_id}"
        data_parts = callback_query.data.split(' ')
        if len(data_parts) < 5:
            await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
            
        liker_username_id, dream_username_id, chat_id, dream_id = data_parts[1:5]
        dream = await db.dream.get_dream_by_id(dream_id=dream_id)
        
        if not dream:
            await callback_query.answer("–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è
        if not redis_cache:
            await callback_query.answer("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        pending_notifications = await redis_cache.get_pending_like_notifications(dream.user_id)
        
        if not pending_notifications:
            await callback_query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ª–∞–π–∫–Ω—É–≤—à–∏—Ö
        likers_info = []
        for notification in pending_notifications:
            liker = notification["liker_info"]
            if liker["username"]:
                likers_info.append(f"‚Ä¢ @{liker['username']} ({liker['first_name']})")
            else:
                likers_info.append(f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {liker['first_name']} (ID: {liker['user_id']})")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
        notification_message = (
            f"üåü **–í–æ—Ç –∫—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è —Ç–≤–æ–∏–º –∂–µ–ª–∞–Ω–∏–µ–º!** üåü\n\n"
            f"**–ñ–µ–ª–∞–Ω–∏–µ:** {dream.name}\n"
            f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤:** {len(pending_notifications)}\n\n"
            "**–õ–∞–π–∫–Ω—É–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n" + "\n".join(likers_info) + "\n\n"
            "**üí° –ß—Ç–æ –¥–∞–ª—å—à–µ?**\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏ –∏–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –û–±—Å—É–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏\n"
            "‚Ä¢ –í–º–µ—Å—Ç–µ –≤–æ–ø–ª–æ—Ç–∏—Ç–µ –º–µ—á—Ç—É –≤ –∂–∏–∑–Ω—å!"
        )
        
        await callback_query.message.edit_text(
            notification_message,
            parse_mode="MARKDOWN"
        )
        
        # –û—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await redis_cache.clear_like_notifications(dream.user_id)
        
        await callback_query.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        logging.error(f"Error in grouped share contact handler: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dreams_router.callback_query(lambda c: c.data.startswith("not_share_contact_grouped"))
async def not_share_contact_grouped_callback_handler(callback_query: CallbackQuery, db, redis_cache=None):
    """Handle grouped not share contact callback."""
    try:
        # –ü–∞—Ä—Å–∏–º callback –¥–∞–Ω–Ω—ã–µ: "not_share_contact_grouped {liker_username} {dream_username} {chat_id} {dream_id}"
        data_parts = callback_query.data.split(' ')
        if len(data_parts) < 5:
            await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
            
        liker_username_id, dream_username_id, chat_id, dream_id = data_parts[1:5]
        dream = await db.dream.get_dream_by_id(dream_id=dream_id)
        
        if not dream:
            await callback_query.answer("–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if redis_cache:
            await redis_cache.clear_like_notifications(dream.user_id)
        
        await callback_query.message.edit_text(
            "üëç **–ü–æ–Ω—è—Ç–Ω–æ!** üëç\n\n"
            "–¢—ã —Ä–µ—à–∏–ª –Ω–µ –¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!\n\n"
            "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
            "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            "–£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π! üöÄ",
            parse_mode="MARKDOWN"
        )
        
        await callback_query.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã!")
        
    except Exception as e:
        logging.error(f"Error in grouped not share contact handler: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dreams_router.callback_query(lambda c: c.data == "like_dream")
async def like_dream_callback_handler(callback_query: CallbackQuery, db, redis_cache=None):
    """Handle like dream button press."""
    try:
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
        if callback_query.from_user.is_bot:
            logging.warning(f"Bot tried to like a dream via callback, ignoring")
            await callback_query.answer("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.user.user_register_check(active_user_id=user_id)
        if not user:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await callback_query.message.edit_reply_markup(reply_markup=None)
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logging.info(f"Could not edit reply markup for user {user_id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            from src.bot.structures.keyboards.dreams import REGISTRATION_REQUIRED_MARKUP
            
            await callback_query.message.answer(
                "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
                "–î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–æ–≤ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n\n"
                "**üìù –ß—Ç–æ –¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:**\n"
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏\n"
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π\n"
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –æ—á–∫–æ–≤\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n"
                "**üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**",
                reply_markup=REGISTRATION_REQUIRED_MARKUP,
                parse_mode="MARKDOWN"
            )
            await callback_query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ offset
        offset = await redis_cache.get_user_offset(user_id) if redis_cache else 0
        dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=offset)
        
        if not dream:
            await callback_query.answer("–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∞–π–∫ –Ω–∞–ø—Ä—è–º—É—é
        author_id = dream.user_id if dream else None
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ª–∞–π–∫–µ
        if dream:
            try:
                await (
                    db.dream_liked_record.new(
                        author_user_id=author_id,
                        liked_user_id=user_id,
                        liked_username=callback_query.from_user.username,
                        dream_name=dream.name,
                        type_feedback="liked"
                    ))
            except Exception as e:
                logging.error(f"Error creating like record: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∞–≤—Ç–æ—Ä—É –∂–µ–ª–∞–Ω–∏—è
        if author_id:
            try:
                await db.progress.increment_likes_received(author_id, 5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—á—Ç–∞—Ç–µ–ª—å" (25 –ª–∞–π–∫–æ–≤)
                author_progress = await db.progress.get_user_progress(author_id)
                if author_progress and author_progress.total_likes_received >= 25:
                    if not await db.achievements.is_achievement_unlocked(author_id, "popular_dreamer"):
                        await db.achievements.unlock_achievement(author_id, "popular_dreamer", 75)
                        await db.progress.increment_likes_received(author_id, 75)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            except Exception as e:
                logging.warning(f"Could not update achievements for user {author_id}: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —Ç–æ–º—É, –∫—Ç–æ —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫
        try:
            await db.progress.increment_likes_given(user_id, 2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–û–±—â–∏—Ç–µ–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞" (100 –ª–∞–π–∫–æ–≤)
            user_progress = await db.progress.get_user_progress(user_id)
            if user_progress and user_progress.total_likes_given >= 100:
                if not await db.achievements.is_achievement_unlocked(user_id, "social_butterfly"):
                    await db.achievements.unlock_achievement(user_id, "social_butterfly", 60)
                    await db.progress.increment_likes_given(user_id, 60)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        except Exception as e:
            logging.warning(f"Could not update achievements for user {user_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É (–¥–ª—è –¥–∏–∑–ª–∞–π–∫–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
        if author_id:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            liker_info = {
                "username": callback_query.from_user.username,
                "user_id": callback_query.from_user.id,
                "first_name": callback_query.from_user.first_name
            }
            
            if redis_cache:
                # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                await redis_cache.add_like_notification(author_id, dream.id, liker_info)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                pending_notifications = await redis_cache.get_pending_like_notifications(author_id)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if len(pending_notifications) == 1:
                    await send_grouped_like_notification(author_id, dream, pending_notifications, callback_query.bot, redis_cache)
            else:
                # –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await send_single_like_notification(author_id, dream, callback_query)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è
        if redis_cache:
            new_offset = await redis_cache.increment_user_offset(user_id)
            logging.info(f"User {user_id} offset incremented to {new_offset}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π offset –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            next_dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=new_offset)
        else:
            # –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π offset + 1
            next_dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=offset + 1)
        
        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not next_dream:
            no_more_dreams_text = (
                "üòî **–ë–æ–ª—å—à–µ –∂–µ–ª–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ** üòî\n\n"
                "–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n"
                "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
                "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ (+15 –æ—á–∫–æ–≤)\n"
                "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                "**üåü –°–æ–≤–µ—Ç:** –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏—Ö! –≠—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –æ—á–∫–∏ –∏ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
            )
            from src.bot.structures.keyboards.dreams import DREAMS_NOT_FOUND_INLINE_MARKUP
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            try:
                await callback_query.message.edit_text(
                    no_more_dreams_text,
                    reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP,
                    parse_mode="MARKDOWN"
                )
            except Exception as e:
                logging.warning(f"Could not edit message, sending new one: {e}")
                await callback_query.message.answer(no_more_dreams_text, reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP, parse_mode="MARKDOWN")
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Å—Ç–∞—Ä–æ–µ –∂–µ–ª–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ
        try:
            await edit_message_with_dream(callback_query.message, next_dream, db, user)
        except Exception as e:
            logging.warning(f"Could not edit message, sending new one: {e}")
            await dreams_view_func(dream=next_dream, message=callback_query.message, db=db, user=user)
        
        # –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ inline –∫–Ω–æ–ø–æ–∫, —Ç–∞–∫ –∫–∞–∫ edit_message_with_dream —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        # await callback_query.message.edit_reply_markup(reply_markup=None)
        
        await callback_query.answer("–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω! ‚ù§Ô∏è")
        
    except Exception as e:
        logging.error(f"Error in like dream callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dreams_router.callback_query(lambda c: c.data == "dislike_dream")
async def dislike_dream_callback_handler(callback_query: CallbackQuery, db, redis_cache=None):
    """Handle dislike dream button press."""
    try:
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
        if callback_query.from_user.is_bot:
            logging.warning(f"Bot tried to dislike a dream via callback, ignoring")
            await callback_query.answer("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫–∏")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.user.user_register_check(active_user_id=user_id)
        if not user:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await callback_query.message.edit_reply_markup(reply_markup=None)
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logging.info(f"Could not edit reply markup for user {user_id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            from src.bot.structures.keyboards.dreams import REGISTRATION_REQUIRED_MARKUP
            
            await callback_query.message.answer(
                "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
                "–î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n\n"
                "**üìù –ß—Ç–æ –¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:**\n"
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏\n"
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π\n"
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –æ—á–∫–æ–≤\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n"
                "**üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**",
                reply_markup=REGISTRATION_REQUIRED_MARKUP,
                parse_mode="MARKDOWN"
            )
            await callback_query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ offset
        offset = await redis_cache.get_user_offset(user_id) if redis_cache else 0
        dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=offset)
        
        if not dream:
            await callback_query.answer("–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∑–ª–∞–π–∫ –Ω–∞–ø—Ä—è–º—É—é
        author_id = dream.user_id if dream else None
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–∏–∑–ª–∞–π–∫–µ
        if dream:
            try:
                await (
                    db.dream_liked_record.new(
                        author_user_id=author_id,
                        liked_user_id=user_id,
                        liked_username=callback_query.from_user.username,
                        dream_name=dream.name,
                        type_feedback="disliked"
                    ))
            except Exception as e:
                logging.error(f"Error creating dislike record: {e}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è
        if redis_cache:
            new_offset = await redis_cache.increment_user_offset(user_id)
            logging.info(f"User {user_id} offset incremented to {new_offset}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π offset –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            next_dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=new_offset)
        else:
            # –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π offset + 1
            next_dream = await db.dream.get_dream_excluding_user(user_id=user_id, offset=offset + 1)
        
        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not next_dream:
            no_more_dreams_text = (
                "üòî **–ë–æ–ª—å—à–µ –∂–µ–ª–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ** üòî\n\n"
                "–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n"
                "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
                "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ (+15 –æ—á–∫–æ–≤)\n"
                "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                "**üåü –°–æ–≤–µ—Ç:** –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏—Ö! –≠—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –æ—á–∫–∏ –∏ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
            )
            from src.bot.structures.keyboards.dreams import DREAMS_NOT_FOUND_INLINE_MARKUP
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            try:
                await callback_query.message.edit_text(
                    no_more_dreams_text,
                    reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP,
                    parse_mode="MARKDOWN"
                )
            except Exception as e:
                logging.warning(f"Could not edit message, sending new one: {e}")
                await callback_query.message.answer(no_more_dreams_text, reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP, parse_mode="MARKDOWN")
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Å—Ç–∞—Ä–æ–µ –∂–µ–ª–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ
        try:
            await edit_message_with_dream(callback_query.message, next_dream, db, user)
        except Exception as e:
            logging.warning(f"Could not edit message, sending new one: {e}")
            await dreams_view_func(dream=next_dream, message=callback_query.message, db=db, user=user)
        
        # –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ inline –∫–Ω–æ–ø–æ–∫, —Ç–∞–∫ –∫–∞–∫ edit_message_with_dream —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        # await callback_query.message.edit_reply_markup(reply_markup=None)
        
        await callback_query.answer("–î–∏–∑–ª–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω! üëé")
        
    except Exception as e:
        logging.error(f"Error in dislike dream callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dreams_router.callback_query(lambda c: c.data == "main_menu")
async def main_menu_callback_handler(callback_query: CallbackQuery, db, redis_cache=None):
    """Handle main menu button press."""
    try:
        from src.bot.structures.keyboards.menu import MENU_KEYBOARD
        
        await callback_query.message.answer(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** üè†\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=MENU_KEYBOARD,
            parse_mode="MARKDOWN"
        )
        await callback_query.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ! üè†")
        
    except Exception as e:
        logging.error(f"Error in main menu callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dreams_router.callback_query(lambda c: c.data == "create_dream")
async def create_dream_callback_handler(callback_query: CallbackQuery, state: FSMContext, db, redis_cache=None):
    """Handle create dream button press."""
    try:
        from src.bot.structures.fsm.dream_create import DreamGroup
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.user.user_register_check(active_user_id=callback_query.from_user.id)
        if not user:
            await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! üîí")
            await callback_query.message.answer(
                "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞** üîí\n\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n\n"
                "**üí° –ß—Ç–æ –¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:**\n"
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è\n"
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –æ—á–∫–æ–≤\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n"
                "**üöÄ –ù–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**",
                reply_markup=REGISTRATION_REQUIRED_MARKUP,
                parse_mode="MARKDOWN"
            )
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è
        await state.set_state(DreamGroup.name)
        
        await callback_query.message.answer(
            "üí≠ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è** üí≠\n\n"
            "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ! –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤.\n\n"
            "**–®–∞–≥ 1/5: –ù–∞–∑–≤–∞–Ω–∏–µ**\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è:",
            reply_markup=CANCEL_BUTTON,
            parse_mode="MARKDOWN"
        )
        
        await callback_query.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è! üí≠")
        
    except Exception as e:
        logging.error(f"Error in create dream callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await callback_query.message.answer(
            "**üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**",
            parse_mode="MARKDOWN"
        )


@dreams_router.callback_query(lambda c: c.data == "retry_dreams")
async def retry_dreams_callback_handler(callback_query: CallbackQuery, db, redis_cache=None):
    """Handle retry dreams button press."""
    try:
        user_id = callback_query.from_user.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º offset –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ
        if redis_cache:
            await redis_cache.set_user_offset(user_id, 0)
        
        dream = await db.dream.get_dream(user_id=user_id, offset=0)
        await dreams_view_func(dream=dream, message=callback_query.message, db=db, user=await db.user.user_register_check(active_user_id=user_id))
        
        await callback_query.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞! üîÑ")
        
    except Exception as e:
        logging.error(f"Error in retry dreams callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dreams_router.callback_query(lambda c: c.data == "start_registration")
async def start_registration_callback_handler(callback_query: CallbackQuery, state: FSMContext, db, redis_cache=None):
    """Handle start registration button press."""
    try:
        from src.bot.structures.fsm.register import RegisterGroup
        
        user_id = callback_query.from_user.id
        logging.info(f"Start registration callback for user {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = await db.user.user_register_check(active_user_id=user_id)
        logging.info(f"User {user_id} registration check result: {existing_user}")
        
        if existing_user:
            logging.info(f"User {user_id} is already registered, showing main menu")
            await callback_query.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üéâ")
            await callback_query.message.answer(
                f"ü§î **–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!** ü§î\n\n"
                f"–ü—Ä–∏–≤–µ—Ç, **{existing_user.name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}**! üëã\n\n"
                "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è\n"
                "‚Ä¢ –ò–∑—É—á–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
                "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n\n"
                "**üöÄ –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**",
                reply_markup=MENU_KEYBOARD,
                parse_mode="MARKDOWN"
            )
            return
        
        logging.info(f"User {user_id} is not registered, starting registration")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.set_state(RegisterGroup.age)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await callback_query.message.answer(
            "üéâ **–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!** üéâ\n\n"
            "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ! –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
            "**–®–∞–≥ 1 –∏–∑ 5: –í–æ–∑—Ä–∞—Å—Ç** üìÖ\n"
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.",
            reply_markup=CANCEL_BUTTON,
            parse_mode="MARKDOWN"
        )
        
        await callback_query.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞! üöÄ")
        
    except Exception as e:
        logging.error(f"Error in start registration callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await callback_query.message.answer(
            "**üí° –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏ /start**",
            parse_mode="MARKDOWN"
        )


@dreams_router.callback_query(lambda c: c.data == "how_it_works")
async def how_it_works_callback_handler(callback_query: CallbackQuery, db, redis_cache=None):
    """Handle how it works button press."""
    try:
        await callback_query.message.answer(
            "‚ùì **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Wanty?** ‚ùì\n\n"
            "**üéØ –û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è:**\n"
            "Wanty - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π –≤ –∂–∏–∑–Ω—å!\n\n"
            "**üì± –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:**\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–º—Å—è –∏–¥–µ—è–º\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è\n"
            "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ª—é–¥–µ–π —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ü–µ–ª—è–º–∏\n"
            "‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
            "**üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:**\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è: +15 –æ—á–∫–æ–≤\n"
            "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–∞: +5 –æ—á–∫–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–µ–ª–∞–Ω–∏–π: +1 –æ—á–∫–æ\n"
            "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: +25 –æ—á–∫–æ–≤\n\n"
            "**üöÄ –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**\n"
            "–ù–∞–∂–º–∏ 'üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞!",
            parse_mode="MARKDOWN"
        )
        
        await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∞! ‚ùì")
        
    except Exception as e:
        logging.error(f"Error in how it works callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dreams_router.callback_query(lambda c: c.data == "create_without_image")
async def create_without_image_handler(callback_query: CallbackQuery, state: FSMContext, db, redis_cache=None):
    """Handle create dream without image button press."""
    try:
        data = await state.get_data()
        description = data.get('description', '')
        category = data.get('category', '')

        # –°–æ–∑–¥–∞–µ–º –∂–µ–ª–∞–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await db.dream.new(
            user_id=callback_query.from_user.id,
            username=callback_query.from_user.username,
            image=None,
            name=data.get('name', ''),
            description=description,
            category=category
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        try:
            await db.progress.increment_dreams(callback_query.from_user.id, 15)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤—ã–π —à–∞–≥"
            if not await db.achievements.is_achievement_unlocked(callback_query.from_user.id, "first_dream"):
                await db.achievements.unlock_achievement(callback_query.from_user.id, "first_dream", 10)
                await db.progress.increment_dreams(callback_query.from_user.id, 10)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        except Exception as e:
            logging.warning(f"Could not update achievements for user {callback_query.from_user.id}: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
        
        await state.clear()
        success_text = (
            "üéâ **–ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!** üéâ\n\n"
            f"**üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n\n"
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Wanty.\n\n"
            "**üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
            "‚Ä¢ +15 –æ—á–∫–æ–≤ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n\n"
            "**‚ú® –ß—Ç–æ –¥–∞–ª—å—à–µ?**\n"
            "‚Ä¢ –ñ–¥–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –æ—Ç –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–∞—Ö\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –∂–µ–ª–∞–Ω–∏—è\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö\n\n"
            "**üí° –°–æ–≤–µ—Ç:** –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω—ã–º! –ß–µ–º –±–æ–ª—å—à–µ —Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—à—å —Å –¥—Ä—É–≥–∏–º–∏, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
        )
        
        await callback_query.message.edit_text(
            success_text,
            reply_markup=DREAMS_NOT_FOUND_INLINE_MARKUP,
            parse_mode="MARKDOWN"
        )
        
        await callback_query.answer("–ñ–µ–ª–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! üéâ")
        
    except Exception as e:
        logging.error(f"Error creating dream without image: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è")
