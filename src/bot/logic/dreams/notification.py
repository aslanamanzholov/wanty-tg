import logging
import asyncio
from typing import List

import emoji
from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError
from sqlalchemy.ext.asyncio import AsyncSession

from src.bot.structures.keyboards.menu import MENU_KEYBOARD
from src.configuration import conf
from src.db.database import create_async_engine, Database


async def get_bot():
    return Bot(token=conf.bot.token)


async def get_database():
    async with AsyncSession(bind=create_async_engine(url=conf.db.build_connection_str())) as session:
        return Database(session)


async def send_periodic_notification(user):
    bot = await get_bot()
    try:
        await bot.send_message(
            user.user_id,
            f"üåü *Wanty –ø—Ä–∏–≥–ª–∞–≤–∞–µ—Ç –≤–∞—Å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–µ–ª–∞–Ω–∏—è!* üåü\n\n"
            f"üëÄ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ö–æ—Ç—è—Ç, –∏ –Ω–∞–π–¥–∏—Ç–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤.\n ",
            reply_markup=MENU_KEYBOARD,
            parse_mode="MARKDOWN"
        )
    except TelegramForbiddenError as e:
        logging.info(e, exc_info=False)
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}", exc_info=True)


async def send_batch_notifications(users: List, batch_size: int = 10):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
    bot = await get_bot()
    
    for i in range(0, len(users), batch_size):
        batch = users[i:i + batch_size]
        tasks = []
        
        for user in batch:
            task = send_periodic_notification(user)
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
        await asyncio.sleep(0.1)


async def periodic_dream_notification():
    try:
        db = await get_database()
        users = await db.user.get_all_user_id()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        await send_batch_notifications(users, batch_size=20)
        
    except Exception as e:
        logging.error(e, exc_info=True)


async def clear_current_records():
    """–û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Redis –∫—ç—à."""
    logging.info("–û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Redis –∫—ç—à")
