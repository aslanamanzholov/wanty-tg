"""This file represents a Register logic."""
import emoji
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from .router import register_router
from src.bot.structures.fsm.register import RegisterGroup
from src.bot.structures.keyboards.register import REGISTER_USER_COUNTRY, REGISTER_USER_GENDER, REGISTER_SUCCESS_MARKUP, \
    REGISTER_START_CONFIRM
from src.bot.structures.keyboards.menu import MENU_KEYBOARD
from src.bot.structures.keyboards.menu import MENU_KEYBOARD
from src.bot.structures.keyboards.dreams import CANCEL_BUTTON


@register_router.message(F.text.lower() == 'ok, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º')
async def register_confirmation(message: Message, state: FSMContext, db):
    user = await db.user.user_register_check(active_user_id=message.from_user.id)

    if user is None:
        await state.set_state(RegisterGroup.age)
        welcome_text = (
            "üéâ **–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!** üéâ\n\n"
            "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ! –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
            "**–®–∞–≥ 1 –∏–∑ 5: –í–æ–∑—Ä–∞—Å—Ç** üìÖ\n"
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ."
        )
        await message.answer(welcome_text, reply_markup=CANCEL_BUTTON, parse_mode="MARKDOWN")
    else:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, *{user.name if user.name else message.from_user.first_name}*! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π\n2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∂–µ–ª–∞–Ω–∏—è\n3. –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
            reply_markup=MENU_KEYBOARD,
            parse_mode="MARKDOWN"
        )


@register_router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state is not None:
        await state.clear()
        await message.answer(f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ {emoji.emojize(':smiling_face_with_tear:')}",
                             reply_markup=REGISTER_START_CONFIRM)


@register_router.message(RegisterGroup.age)
async def register_gender_handler(message: Message, state: FSMContext):
    age_text = message.text.strip()

    if not age_text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")

    age = int(age_text)

    if age <= 0:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

    await state.update_data(age=age)
    await state.set_state(RegisterGroup.gender)

    gender_text = (
        "‚úÖ **–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!** ‚úÖ\n\n"
        "**–®–∞–≥ 2 –∏–∑ 5: –ü–æ–ª** üë§\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ."
    )
    return await message.answer(gender_text, reply_markup=REGISTER_USER_GENDER, parse_mode="MARKDOWN")


@register_router.message(RegisterGroup.gender)
async def register_country_handler(message: Message, state: FSMContext):
    gender = message.text.strip().lower()

    if gender not in ["–º—É–∂—á–∏–Ω–∞", "–∂–µ–Ω—â–∏–Ω–∞"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

    await state.update_data(gender=gender)
    await state.set_state(RegisterGroup.country)

    country_text = (
        "‚úÖ **–ü–æ–ª –≤—ã–±—Ä–∞–Ω!** ‚úÖ\n\n"
        "**–®–∞–≥ 3 –∏–∑ 5: –ì–æ—Ä–æ–¥** üåç\n"
        "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏!"
    )
    return await message.answer(country_text, reply_markup=REGISTER_USER_COUNTRY, parse_mode="MARKDOWN")


@register_router.message(RegisterGroup.country)
async def register_name_handler(message: Message, state: FSMContext):
    country = message.text.strip()

    if not country:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É.")

    await state.update_data(country=country)
    await state.set_state(RegisterGroup.name)

    name_text = (
        "‚úÖ **–ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω!** ‚úÖ\n\n"
        "**–®–∞–≥ 4 –∏–∑ 5: –ò–º—è** ‚ú®\n"
        "–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å? –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è –∏–ª–∏ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–æ–∑–≤–∏—â–µ!"
    )
    return await message.answer(name_text, reply_markup=CANCEL_BUTTON, parse_mode="MARKDOWN")


@register_router.message(RegisterGroup.name)
async def register_user_handler(message: Message, state: FSMContext, db):
    try:
        data = await state.get_data()
        user_id = message.from_user.id
        user_name = message.from_user.username if message.from_user.username else None
        name = data.get('name') or message.text
        age = int(data.get('age'))
        gender = data.get('gender')
        country = data.get('country')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = await db.user.user_register_check(active_user_id=user_id)
        if existing_user:
            await state.clear()
            await message.answer(
                f"ü§î **–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!** ü§î\n\n"
                f"–ü—Ä–∏–≤–µ—Ç, **{existing_user.name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}**! üëã\n\n"
                "**üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è\n"
                "‚Ä¢ –ò–∑—É—á–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
                "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n\n"
                "**üöÄ –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**",
                reply_markup=MENU_KEYBOARD,
                parse_mode="MARKDOWN"
            )
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.user.new(user_id=user_id, user_name=user_name, name=name, age=age,
                          gender=gender, country=country)
        await state.clear()

        success_text = (
            f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!** üéâ\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, **{name}**! üëã\n\n"
            "**‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ Wanty!\n\n"
                    "**üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
        "‚Ä¢ +25 –æ—á–∫–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'\n\n"
        "**üöÄ –ß—Ç–æ –¥–∞–ª—å—à–µ?**\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è (+15 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–µ)\n"
        "‚Ä¢ –ò–∑—É—á–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–µ–ª–∞–Ω–∏–π\n"
        "‚Ä¢ –ù–∞—Ö–æ–¥–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –û–±—â–∞–π—Å—è –∏ –∑–Ω–∞–∫–æ–º—å—Å—è!\n\n"
            "**üí° –°–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–Ω–∏–π - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ñ–µ–ª–∞–Ω–∏—è' –Ω–∏–∂–µ!"
        )
        
        return await message.answer(
            success_text,
            reply_markup=MENU_KEYBOARD,
            parse_mode="MARKDOWN"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        from src.bot.structures.keyboards.menu import ADDITIONAL_FEATURES_MARKUP
        
        await message.answer(
            "üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**",
            reply_markup=ADDITIONAL_FEATURES_MARKUP,
            parse_mode="MARKDOWN"
        )
    except Exception as e:
        print(f"Error in register_user_handler: {e}")
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
            reply_markup=REGISTER_START_CONFIRM
        )
