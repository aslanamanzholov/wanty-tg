"""This file represents a My Profile logic."""
from os import getenv

import emoji
import requests
from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, Message

from .router import myprofile_router
from src.bot.structures.fsm.dream_edit import DreamEditGroup
from src.bot.structures.keyboards.dreams import (DREAMS_NOT_FOUND_BUTTONS_PROFILE_MARKUP,
                                                 CANCEL_BUTTON, DREAMS_NOT_FOUND_BUTTONS_MARKUP,
                                                 CANCEL_WITHOUT_IMAGE_BUTTON)
from src.bot.structures.fsm.register import ChangeProfileName
from src.bot.structures.keyboards.menu import MENU_KEYBOARD


@myprofile_router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state is not None:
        await state.clear()
        await message.answer(f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ {emoji.emojize(':smiling_face_with_tear:')}",
                             reply_markup=DREAMS_NOT_FOUND_BUTTONS_MARKUP)


@myprofile_router.message(F.text.lower().startswith('–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è'))
async def dream_change_name_handler(message: types.Message, state: FSMContext):
    await state.set_state(ChangeProfileName.name)
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='MARKDOWN'
    )


@myprofile_router.message(ChangeProfileName.name)
async def edit_dream_name_handler(message: types.Message, state: FSMContext, db):
    new_name = message.text

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await db.user.get_user_by_id(message.from_user.id)
    user.name = new_name
    await db.session.commit()

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏
    await message.answer(
        text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –∏–º—è –Ω–∞ *{new_name}*",
        reply_markup=MENU_KEYBOARD,
        parse_mode='MARKDOWN'
    )


@myprofile_router.message(F.text.lower() == '–º–æ–∏ –∂–µ–ª–∞–Ω–∏—è')
@myprofile_router.message(Command(commands='mydreams'))
async def mydream_handler(message: types.Message, db):
    dreams_of_user = await db.dream.get_dreams_of_user(user_id=message.from_user.id)
    if dreams_of_user:
        for ind, dream in enumerate(dreams_of_user):
            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data=f'edit_dream {dream.id}')],
                    [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_dream {dream.id}')]
                ]
            )
            text = (f"\n*–ñ–µ–ª–∞–Ω–∏–µ ‚Ññ{ind + 1}*\n\n"
                    f"*–¢–µ–º–∞*: {dream.name}\n"
                    f"*–û–ø–∏—Å–∞–Ω–∏–µ*: {dream.description}\n\n")
            if dream.image:
                await message.bot.send_photo(message.chat.id,
                                             types.BufferedInputFile(dream.image,
                                                                     filename=f"user_photo_{dream.id}.png"),
                                             caption=text,
                                             reply_markup=reply_markup,
                                             parse_mode='MARKDOWN')
            else:
                await message.answer(text, reply_markup=reply_markup, parse_mode='MARKDOWN')

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç—Ç–æ—Ç –±–ª–æ–∫ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ü–∏–∫–ª–∞
        await message.answer(
            f"*–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:* {emoji.emojize(':backhand_index_pointing_down:')}",
            reply_markup=MENU_KEYBOARD,
            parse_mode='MARKDOWN'
        )
    else:
        await message.answer(
            "–£–ø—Å, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π –≤ Wanty :(\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",
            reply_markup=DREAMS_NOT_FOUND_BUTTONS_PROFILE_MARKUP
        )


@myprofile_router.callback_query(F.data.startswith("edit_dream"))
async def myprofile_edit_dream_callback_handler(callback_query: types.CallbackQuery, state: FSMContext, db):
    dream_id = callback_query.data.split(' ')[1] or None
    await state.set_state(DreamEditGroup.name)
    await state.update_data(dream_id=dream_id)

    await callback_query.message.answer(
        f'{emoji.emojize(":speech_balloon:")} –ù–∞–ø–∏—à–∏, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è:',
        reply_markup=CANCEL_BUTTON,
    )


@myprofile_router.message(DreamEditGroup.name)
async def edit_dream_name_handler(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(DreamEditGroup.image)

    text = (
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∂–µ–ª–∞–Ω–∏–µ–º. "
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–≤–ª–µ—á—å –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –ª—é–¥–µ–π "
        f"{emoji.emojize(':thumbs_up:')} (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)"
    )

    await message.answer(text, reply_markup=CANCEL_WITHOUT_IMAGE_BUTTON)


@myprofile_router.message(DreamEditGroup.image)
async def edit_dream_description_handler(message: types.Message, state: FSMContext):
    await state.update_data(image=message.photo)
    await state.set_state(DreamEditGroup.description)

    text = '–û–ø–∏—à–∏ –Ω–∏–∂–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∂–µ–ª–∞–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å üòâ'
    await message.answer(text, reply_markup=CANCEL_BUTTON)


@myprofile_router.message(DreamEditGroup.description)
async def edit_user_dream_handler(message: types.Message, state: FSMContext, db):
    try:
        data = await state.get_data()
        dream_id = int(data.get('dream_id'))
        name = data.get('name')
        description = message.text
        image_data = data.get('image')
        image_content = None

        if image_data:
            photo = image_data[-1]
            photo_file = await message.bot.get_file(photo.file_id)
            photo_url = photo_file.file_path
            request_url = f"https://api.telegram.org/file/bot{getenv('BOT_TOKEN')}/{photo_url}"
            response = requests.get(request_url)

            if response.status_code == 200:
                image_content = response.content
            else:
                raise Exception("Failed to fetch image content")

        dream = await db.dream.get_dream_by_id(dream_id)
        dream.name = name
        dream.description = description
        dream.image = image_content if image_data else None

        await db.session.commit()
        await state.clear()

        await message.answer(
            '*–¢—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∂–µ–ª–∞–Ω–∏—è..\n\n–û–∂–∏–¥–∞–π—Ç–µ –≤–∑–∞–∏–º–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤*',
            reply_markup=DREAMS_NOT_FOUND_BUTTONS_MARKUP,
            parse_mode="MARKDOWN"
        )
    except Exception as e:
        print(f"Error in edit_user_dream_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@myprofile_router.callback_query(F.data.startswith("delete_dream"))
async def myprofile_delete_dream_callback_handler(callback_query: types.CallbackQuery, db):
    try:
        dream_id = int(callback_query.data.split(' ')[1])
        dream = await db.dream.get_dream_by_id(dream_id)

        if dream:
            await db.session.delete(dream)
            await db.session.commit()
            await callback_query.message.answer("*–ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ*", parse_mode='MARKDOWN')
        else:
            await callback_query.message.answer("*–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∂–µ–ª–∞–Ω–∏–µ :(*", parse_mode='MARKDOWN')
    except Exception as e:
        print(f"Error in myprofile_delete_dream_callback_handler: {e}")
        await callback_query.message.answer("*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                            "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.*", parse_mode='MARKDOWN')
